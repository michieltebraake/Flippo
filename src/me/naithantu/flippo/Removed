Verwijderde methods/codes.

	
	double calculateAnswer() {
		//calcLocation is the location with the operator. (1,3,5)
		int calcLocation = 1;
		String calcString = calculationText.get(calcLocation);
		//Set start total to the first number.
		calc.setTotal(Integer.parseInt(calculationText.get(calcLocation - 1)));
		//Loop through the other numbers and calculate it. This needs to be improved by first doing * and /, then + and -.
		int i = 0;
		while (i < 3) {
			calcString = calculationText.get(calcLocation);
			if (calcString.equalsIgnoreCase("+")) {
				calc.add(Integer.parseInt(calculationText.get(calcLocation + 1)));
			} else if (calcString.equalsIgnoreCase("-")) {
				calc.subtract(Integer.parseInt(calculationText.get(calcLocation + 1)));
			} else if (calcString.equalsIgnoreCase("*")) {
				calc.multiply(Integer.parseInt(calculationText.get(calcLocation + 1)));
			} else if (calcString.equalsIgnoreCase("/")) {
				calc.divide(Integer.parseInt(calculationText.get(calcLocation + 1)));
			}
			calcLocation = calcLocation + 2;
			i++;
		}
		return calc.getTotal();
	}
	
	List<Integer> getDMLocations(){
		//Divide or multiply locations.
		List<Integer> DMLocations = new ArrayList<Integer>();
		int i = 1;
		while(i <= 7){
			if(calculationText.get(i).equalsIgnoreCase("*")||calculationText.get(i).equalsIgnoreCase("*")){
				DMLocations.add(i);
			}
		}
		return DMLocations;
	}
	
	v2:
	
		double calculateAnswer(List<String> calcText) {
		List<Integer> usedNumberLocations = new ArrayList<Integer>();
		//operatorLocation is the location with the operator. (1,3,5)
		int operatorLocation;
		String calcString;
		int numberToCalculate;
		int numberToCalculateLocation;
		//Get the proper calculation order, first * and /, then + and -.
		List<Integer> calcOrder = getCalcOrder(calcText);
		//Set start total to the first number.
		calc.setTotal(Integer.parseInt(calcText.get(calcOrder.get(0) - 1)));
		usedNumberLocations.add(calcOrder.get(0) - 1);
		//Loop through the other numbers and calculate it.
		int i = 0;
		while (i < 3) {
			//Get the operator.
			operatorLocation = calcOrder.get(i);
			calcString = calcText.get(operatorLocation);
			//Get the number.
			numberToCalculate = Integer.parseInt(calcText.get(operatorLocation + 1));
			numberToCalculateLocation = operatorLocation + 1;
			if (usedNumberLocations.contains(operatorLocation + 1)) {
				numberToCalculateLocation = operatorLocation - 1;
			}
			numberToCalculate = Integer.parseInt(calcText.get(numberToCalculateLocation));
			//Calculate
			if (calcString.equalsIgnoreCase("+")) {
				calc.add(numberToCalculate);
			} else if (calcString.equalsIgnoreCase("-")) {
				calc.subtract(numberToCalculate);
			} else if (calcString.equalsIgnoreCase("*")) {
				calc.multiply(numberToCalculate);
			} else if (calcString.equalsIgnoreCase("/")) {
				calc.divide(numberToCalculate);
			}
			usedNumberLocations.add(numberToCalculateLocation);
			i++;
		}
		return calc.getTotal();
	}

	List<Integer> getCalcOrder(List<String> calcText) {
		//Add divide or multiply locations.
		List<Integer> calcOrder = new ArrayList<Integer>();
		int i = 1;
		while (i <= 5) {
			if (calcText.get(i).equalsIgnoreCase("*") || calcText.get(i).equalsIgnoreCase("/")) {
				calcOrder.add(i);
			}
			i = i + 2;
		}
		//Add add and subtract locations after that.
		i = 1;
		while (i <= 5) {
			if (calcText.get(i).equalsIgnoreCase("-") || calcText.get(i).equalsIgnoreCase("+")) {
				calcOrder.add(i);
			}
			i = i + 2;
		}
		System.out.println("Calcorder: " + calcOrder);
		return calcOrder;
	}
	
	
	
	
	package me.naithantu.flippo;

import java.util.List;

public class Calculation {

	private double total;
	public Calculation() {
		total = 0;
	}
	public double getTotal(){
		return total;
	}
	public void setTotal(double number) {
		total = number;
	}
	public void add(double number) {
		total += number;
	}
	public void subtract(double number) {
		total -= number;
	}
	public void multiply(double number) {
		total *= number;
	}
	public void divide(double number) {
		total /= number;
	}
	static double calcAnswer(List<String> calcText) {
		double n1, n2, n3, n4, answer = 0;
		String o1, o2, o3;
		n1 = Integer.parseInt(calcText.get(0));
		n2 = Integer.parseInt(calcText.get(2));
		n3 = Integer.parseInt(calcText.get(4));
		n4 = Integer.parseInt(calcText.get(6));
		o1 = calcText.get(1);
		o2 = calcText.get(3);
		o3 = calcText.get(5);
		if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("+"))
			answer = n1 + n2 + n3 + n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("-"))
			answer = n1 + n2 + n3 - n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("*"))
			answer = n1 + n2 + n3 * n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("/"))
			answer = n1 + n2 + n3 / n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("+"))
			answer = n1 + n2 - n3 + n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("-"))
			answer = n1 + n2 - n3 - n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("*"))
			answer = n1 + n2 - n3 * n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("/"))
			answer = n1 + n2 - n3 / n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("+"))
			answer = n1 + n2 * n3 + n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("-"))
			answer = n1 + n2 * n3 - n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("*"))
			answer = n1 + n2 * n3 * n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("/"))
			answer = n1 + n2 * n3 / n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("+"))
			answer = n1 + n2 / n3 + n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("-"))
			answer = n1 + n2 / n3 - n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("*"))
			answer = n1 + n2 / n3 * n4;
		else if (o1.equalsIgnoreCase("+") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("/"))
			answer = n1 + n2 / n3 / n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("+"))
			answer = n1 - n2 + n3 + n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("-"))
			answer = n1 - n2 + n3 - n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("*"))
			answer = n1 - n2 + n3 * n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("/"))
			answer = n1 - n2 + n3 / n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("+"))
			answer = n1 - n2 - n3 + n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("-"))
			answer = n1 - n2 - n3 - n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("*"))
			answer = n1 - n2 - n3 * n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("/"))
			answer = n1 - n2 - n3 / n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("+"))
			answer = n1 - n2 * n3 + n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("-"))
			answer = n1 - n2 * n3 - n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("*"))
			answer = n1 - n2 * n3 * n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("/"))
			answer = n1 - n2 * n3 / n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("+"))
			answer = n1 - n2 / n3 + n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("-"))
			answer = n1 - n2 / n3 - n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("*"))
			answer = n1 - n2 / n3 * n4;
		else if (o1.equalsIgnoreCase("-") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("/"))
			answer = n1 - n2 / n3 / n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("+"))
			answer = n1 * n2 + n3 + n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("-"))
			answer = n1 * n2 + n3 - n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("*"))
			answer = n1 * n2 + n3 * n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("/"))
			answer = n1 * n2 + n3 / n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("+"))
			answer = n1 * n2 - n3 + n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("-"))
			answer = n1 * n2 - n3 - n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("*"))
			answer = n1 * n2 - n3 * n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("/"))
			answer = n1 * n2 - n3 / n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("+"))
			answer = n1 * n2 * n3 + n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("-"))
			answer = n1 * n2 * n3 - n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("*"))
			answer = n1 * n2 * n3 * n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("/"))
			answer = n1 * n2 * n3 / n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("+"))
			answer = n1 * n2 / n3 + n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("-"))
			answer = n1 * n2 / n3 - n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("*"))
			answer = n1 * n2 / n3 * n4;
		else if (o1.equalsIgnoreCase("*") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("/"))
			answer = n1 * n2 / n3 / n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("+"))
			answer = n1 / n2 + n3 + n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("-"))
			answer = n1 / n2 + n3 - n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("*"))
			answer = n1 / n2 + n3 * n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("+") && o3.equalsIgnoreCase("/"))
			answer = n1 / n2 + n3 / n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("+"))
			answer = n1 / n2 - n3 + n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("-"))
			answer = n1 / n2 - n3 - n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("*"))
			answer = n1 / n2 - n3 * n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("-") && o3.equalsIgnoreCase("/"))
			answer = n1 / n2 - n3 / n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("+"))
			answer = n1 / n2 * n3 + n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("-"))
			answer = n1 / n2 * n3 - n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("*"))
			answer = n1 / n2 * n3 * n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("*") && o3.equalsIgnoreCase("/"))
			answer = n1 / n2 * n3 / n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("+"))
			answer = n1 / n2 / n3 + n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("-"))
			answer = n1 / n2 / n3 - n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("*"))
			answer = n1 / n2 / n3 * n4;
		else if (o1.equalsIgnoreCase("/") && o2.equalsIgnoreCase("/") && o3.equalsIgnoreCase("/"))
			answer = n1 / n2 / n3 / n4;
		return answer;
	}
}
	